# To also start the sensor
version: "3.0"

networks:
  dev:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      - dev
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks:
      - dev
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - "29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_MIN_INSYNC_REPLICAS: "1"
      # KAFKA_CREATE_TOPICS: |
      #   species-updates:1:1
      #   org-updates:1:1
      #   rest-key-updates:1:1
      #   graphql-key-updates:1:1

  # Used because KAFKA_CREATE_TOPICS doesn't work for some reason
  # init-kafka:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: init-kafka
  #   networks:
  #     - dev
  #   depends_on:
  #     - kafka
  #   entrypoint: ["/bin/sh", "-c"]
  #   command: |
  #     "
  #     # blocks until kafka is reachable
  #     kafka-topics --bootstrap-server kafka:29092 --list

  #     echo -e 'Creating kafka topics'
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic species-updates --replication-factor 1 --partitions 1
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic org-updates --replication-factor 1 --partitions 1
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic rest-key-updates --replication-factor 1 --partitions 1
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic graphql-key-updates --replication-factor 1 --partitions 1
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic water-quality-updates --replication-factor 1 --partitions 1

  #     echo -e 'Successfully created the following topics:'
  #     kafka-topics --bootstrap-server kafka:29092 --list
  #     "

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    networks:
      - dev
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: kafka_test
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

  netbackend:
    image: docker.io/library/netbackend
    depends_on:
      - postgresTest
      - postgresCustomerOne
      - postgresCustomerTwo
      - kafka
    container_name: netbackend
    ports:
      - "8088:80"
    build:
      context: ./backend/
      dockerfile: Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=password;Server=postgresTest;Database=postgresTestDB;Pooling=true;Port=5432;
      - ConnectionStrings__CustomerOneConnection=User ID=postgres;Password=password;Server=postgresCustomerOne;Database=postgresCustomerOneDB;Pooling=true;Port=5432;
      - ConnectionStrings__CustomerTwoConnection=User ID=postgres;Password=password;Server=postgresCustomerTwo;Database=postgresCustomerTwoDB;Pooling=true;Port=5432;
      - ASPNETCORE_URLS=http://+:80
    networks:
      - dev

  postgresTest:
    image: postgres:latest
    container_name: postgresTest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgresTestDB
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - ./backend/.containers/postgresTestDb:/var/lib/postgresql/data
    networks:
      - dev

  postgresCustomerOne:
    image: postgres:latest
    container_name: postgresCustomerOne
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgresCustomerOneDB
    ports:
      - "5434:5432"
    restart: always
    volumes:
      - ./backend/.containers/postgresCustomerOneDb:/var/lib/postgresql/data
    networks:
      - dev

  postgresCustomerTwo:
    image: postgres:latest
    container_name: postgresCustomerTwo
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgresCustomerTwoDB
    ports:
      - "5435:5432"
    restart: always
    volumes:
      - ./backend/.containers/postgresCustomerTwoDb:/var/lib/postgresql/data
    networks:
      - dev

  mock-sensors:
    image: docker.io/library/mocksensors
    container_name: mock-sensors
    depends_on:
      - kafka
    networks:
      - dev
    build:
      context: ./kafka/MockSensors/
      dockerfile: Dockerfile
    ports:
      - "8089:80"
    environment:
      - ASPNETCORE_URLS=http://+:80

volumes:
  app_data:
