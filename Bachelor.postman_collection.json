{
	"info": {
		"_postman_id": "dfb7ca8e-b1aa-47e2-b455-787e9b960e52",
		"name": "Bachelor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25407546"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "invalid login test123@mail.com",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"var accessToken = responseData.accessToken;\r",
									"pm.environment.set(\"accessToken\", accessToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"test123@mail.com\",\r\n  \"password\": \"TestPassword1!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"registered@mail.com\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login with registered registered@mail.com",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"var accessToken = responseData.accessToken;\r",
									"pm.environment.set(\"accessToken\", accessToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"registered@mail.com\",\r\n  \"password\": \"Password123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login test@mail.com",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"var accessToken = responseData.accessToken;\r",
									"pm.environment.set(\"accessToken\", accessToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"test@mail.com\",\r\n  \"password\": \"TestPassword1!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid user level token to Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8088/api/user/get-all-users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"user",
								"get-all-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "login admin@mail.com",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseData = pm.response.json();\r",
									"var accessToken = responseData.accessToken;\r",
									"pm.environment.set(\"accessToken\", accessToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"admin@mail.com\",\r\n  \"password\": \"Password1!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "valid admin  level token to Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8088/api/user/get-all-users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"user",
								"get-all-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8088/api/user/userinfo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"user",
								"userinfo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "REST",
			"item": [
				{
					"name": "Themes",
					"item": [
						{
							"name": "get-default-endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the value of the 1st and 2nd 'path' field from the json\r",
											"var path1 = responseBody[0].path;\r",
											"var path2 = responseBody[1].path;\r",
											"\r",
											"// Store the endpoints in environment variables\r",
											"pm.environment.set('first-default-endpoint', path1);\r",
											"pm.environment.set('second-default-endpoint', path2);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8088/api/database/get-default-endpoints",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"database",
										"get-default-endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "create-theme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the value of the 'id' field from the theme object\r",
											"var themeId = responseBody.id;\r",
											"\r",
											"// Store the 'id' value in an environment variable\r",
											"pm.environment.set('new_theme_id', themeId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"themeName\": \"theme1\",\r\n    \"accessibleEndpoints\": [\r\n        \"{{first-default-endpoint}}\",\r\n        \"{{second-default-endpoint}}\"\r\n    ],\r\n    \"isDeprecated\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8088/api/rest/create-theme",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"rest",
										"create-theme"
									]
								}
							},
							"response": []
						},
						{
							"name": "get-themes-by-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8088/api/rest/get-themes-by-user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"rest",
										"get-themes-by-user"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-theme",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the value of the 'id' field from the theme object\r",
											"var themeId = responseBody.id;\r",
											"\r",
											"// Store the 'id' value in an environment variable\r",
											"pm.environment.set('updated_theme_id', themeId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{new_theme_id}}\",\r\n    \"themeName\": \"new theme name\",\r\n    \"accessibleEndpoints\": [\r\n        \"{{first-default-endpoint}}\"\r\n    ],\r\n    \"isDeprecated\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8088/api/rest/update-theme",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"rest",
										"update-theme"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Keys",
					"item": [
						{
							"name": "create-accesskey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the value of the 'id' field from the accesskey object\r",
											"var encryptedKey = responseBody.encryptedKey;\r",
											"\r",
											"// Store the 'id' value in an environment variable\r",
											"pm.environment.set('new_encryptedKey', encryptedKey);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"keyName\": \"testKey\",\r\n  \"themeIds\": [\r\n      \"{{updated_theme_id}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8088/api/rest/create-accesskey",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"rest",
										"create-accesskey"
									]
								}
							},
							"response": []
						},
						{
							"name": "get-apikeys-by-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8088/api/rest/get-keys-by-user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"rest",
										"get-keys-by-user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Key test",
					"item": [
						{
							"name": "accesskey-themes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"encryptedKey\": \"{{new_encryptedKey}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8088/api/rest/accesskey-themes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"rest",
										"accesskey-themes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete-accesskey-by-encryptedkey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"encryptedKey\": \"{{new_encryptedKey}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/api/rest/delete-accesskey-by-encryptedkey",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"rest",
								"delete-accesskey-by-encryptedkey"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-theme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/api/rest/delete-theme?id={{updated_theme_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"rest",
								"delete-theme"
							],
							"query": [
								{
									"key": "id",
									"value": "{{updated_theme_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GraphQL",
			"item": [
				{
					"name": "Keys",
					"item": [
						{
							"name": "GraphQL GetAvailableQueries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"availableQueries is not null\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var availableQueries = responseBody.data.availableQueries;\r",
											"    pm.expect(availableQueries).to.not.equal(null)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\n  availableQueries\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8088/graphql/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"graphql",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GraphQL GetAvailableClassTables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"availableClassTables is not null\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var availableClassTables = responseBody.data.availableClassTables;\r",
											"    pm.expect(availableClassTables).to.not.equal(null)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\n  availableClassTables {\r\n      name\r\n      properties {\r\n        name\r\n        propertyType\r\n      }\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8088/graphql/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"graphql",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create-accesskey GraphQL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the value of the 'id' field from the accesskey object\r",
											"var encryptedKey = responseBody.data.createGraphQLAccessKey.encryptedKey;\r",
											"\r",
											"// Store the 'id' value in an environment variable\r",
											"pm.environment.set('new_encryptedKey', encryptedKey);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\r\n  createGraphQLAccessKey(\r\n    keyName: \"ExampleKey\"\r\n    permissions: [\r\n        {\r\n            queryName: \"species\"\r\n            allowedFields: [\"id\", \"name\"]\r\n        }\r\n    ])\r\n    {\r\n        encryptedKey\r\n    }\r\n}\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8088/graphql/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"graphql",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Key test",
					"item": [
						{
							"name": "Species Key GraphQL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Species is not null\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var species = responseBody.data.species;\r",
											"    pm.expect(species).to.not.equal(null)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($encryptedKey: String!){\r\n  species(\r\n    encryptedKey: $encryptedKey)\r\n    {\r\n        id\r\n        name\r\n    }\r\n}",
										"variables": "{\r\n    \"encryptedKey\": \"{{new_encryptedKey}}\"\r\n}"
									}
								},
								"url": {
									"raw": "http://localhost:8088/graphql/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"graphql",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Species GraphQL Bearer Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Species is not null\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var species = responseBody.data.species;\r",
											"    pm.expect(species).to.not.equal(null)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\n  species\r\n  {\r\n    id\r\n    name\r\n  }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8088/graphql/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"graphql",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Licenseelist GraphQL Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Organizations is not null\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var organizations = responseBody.data.organizations;\r",
											"    pm.expect(organizations).to.equal(null)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($encryptedKey: String!){\r\n    organizations(encryptedKey: $encryptedKey)\r\n    {\r\n        orgNo\r\n        name\r\n    }\r\n}",
										"variables": "{\r\n    \"encryptedKey\": \"{{new_encryptedKey}}\"\r\n}"
									}
								},
								"url": {
									"raw": "http://localhost:8088/graphql/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"graphql",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Licenseelist GraphQL Bearer Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Organizations is not null\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var organizations = responseBody.data.organizations;\r",
											"    pm.expect(organizations).to.not.equal(null)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\n  organizations\r\n  {\r\n    orgNo\r\n    name\r\n  }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8088/graphql/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"graphql",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Licenseelist GraphQL no token or key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Organizations is null\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var organizations = responseBody.data.organizations;\r",
											"    pm.expect(organizations).to.equal(null)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n  organizations\r\n  {\r\n    orgNo\r\n    name\r\n  }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8088/graphql/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"graphql",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Both GraphQL Bearer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Species is not null\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var species = responseBody.data.species;\r",
											"    pm.expect(species).to.not.equal(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Organizations is not null\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var organizations = responseBody.data.organizations;\r",
											"    pm.expect(organizations).to.not.equal(null)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\n    species\r\n    {\r\n        id\r\n        name\r\n    }\r\n    organizations\r\n    {\r\n        orgNo\r\n        name\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8088/graphql/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"graphql",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete-accesskey-by-encryptedkey GraphQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"isSuccess is true\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    var isSuccess = responseBody.data.deleteGraphQLApiKeyByEncryptedKey.isSuccess;\r",
									"    pm.expect(isSuccess).to.equal(true)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($encryptedKey: String!) {\r\n  deleteGraphQLApiKeyByEncryptedKey(\r\n    encryptedKey: $encryptedKey\r\n    )\r\n    {\r\n        isSuccess,\r\n        message\r\n    }\r\n}",
								"variables": "{\r\n    \"encryptedKey\": \"{{new_encryptedKey}}\"\r\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8088/graphql/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"graphql",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Kafka",
			"item": [
				{
					"name": "Keys",
					"item": [
						{
							"name": "get-available-topics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the value of the 1st and 2nd 'path' field from the json\r",
											"var topic1 = responseBody[0];\r",
											"var topic2 = responseBody[1];\r",
											"\r",
											"// Store the endpoints in environment variables\r",
											"pm.environment.set('first-topic', topic1);\r",
											"pm.environment.set('second-topic', topic2);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8088/api/kafka/get-available-topics",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"kafka",
										"get-available-topics"
									]
								}
							},
							"response": []
						},
						{
							"name": "create-accesskey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Extract the value of the 'id' field from the accesskey object\r",
											"var encryptedKey = responseBody.encryptedKey;\r",
											"\r",
											"// Store the 'id' value in an environment variable\r",
											"pm.environment.set('new_encryptedKey', encryptedKey);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"keyName\": \"kafkaKey\",\r\n    \"topics\": [\r\n        \"{{first-topic}}\",\r\n        \"{{second-topic}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8088/api/kafka/create-accesskey",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"kafka",
										"create-accesskey"
									]
								}
							},
							"response": []
						},
						{
							"name": "get-keys-by-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8088/api/kafka/get-keys-by-user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"kafka",
										"get-keys-by-user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Key test",
					"item": [
						{
							"name": "Key topics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"encryptedKey\": \"{{new_encryptedKey}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8088/api/kafka/accesskey-kafka-topics",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"kafka",
										"accesskey-kafka-topics"
									]
								}
							},
							"response": []
						},
						{
							"name": "subscribe-to-topics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"encryptedKey\": \"{{new_encryptedKey}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8088/api/kafka/subscribe-to-topics",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"kafka",
										"subscribe-to-topics"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete-accesskey-by-encryptedkey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"encryptedKey\": \"{{new_encryptedKey}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/api/kafka/delete-accesskey-by-encryptedkey",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"kafka",
								"delete-accesskey-by-encryptedkey"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8088/api/user/get-all-users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"user",
								"get-all-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8088/api/user/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"user",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "change-role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"registered@mail.com\",\r\n    \"role\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/api/user/change-role",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"user",
								"change-role"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-database-names",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the value of the 1st and 2nd 'path' field from the json\r",
									"var databaseName = responseBody[0];\r",
									"\r",
									"// Store the endpoints in environment variables\r",
									"pm.environment.set('database_name', databaseName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8088/api/database/get-database-names",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"database",
								"get-database-names"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-database-name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"registered@mail.com\",\r\n  \"database\": \"{{database_name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8088/api/user/update-database-name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8088",
							"path": [
								"api",
								"user",
								"update-database-name"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete-user-by-email registered@mail.com",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"registered@mail.com\",\r\n  \"password\": \"Password123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8088/api/user/delete-user-by-email?email=registered@mail.com",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8088",
					"path": [
						"api",
						"user",
						"delete-user-by-email"
					],
					"query": [
						{
							"key": "email",
							"value": "registered@mail.com"
						}
					]
				}
			},
			"response": []
		}
	]
}