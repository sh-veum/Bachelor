// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetBackend.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NetBackend.Migrations.CustomerOneDb
{
    [DbContext(typeof(CustomerOneDbContext))]
    [Migration("20240203015324_key-attempt2")]
    partial class keyattempt2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NetBackend.Models.ControlAreas.ExportRestrictionArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LocalityNo")
                        .HasColumnType("integer");

                    b.Property<int>("Week")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ExportRestrictionAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocalityNo = 1,
                            Week = 1,
                            Year = 2022
                        },
                        new
                        {
                            Id = 2,
                            LocalityNo = 2,
                            Week = 2,
                            Year = 2022
                        });
                });

            modelBuilder.Entity("NetBackend.Models.ControlAreas.IlaControlArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ForskLink")
                        .HasColumnType("text");

                    b.Property<string>("ForskNavn")
                        .HasColumnType("text");

                    b.Property<string>("ForskNr")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OriginalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SistEndret")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("IlaControlAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ForskLink = "http://example.com/controlarea1",
                            ForskNavn = "Control Area 1",
                            ForskNr = "ILA001",
                            FromDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OriginalDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            SistEndret = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            ToDate = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Version = 1
                        },
                        new
                        {
                            Id = 2,
                            ForskLink = "http://example.com/controlarea2",
                            ForskNavn = "Control Area 2",
                            ForskNr = "ILA002",
                            FromDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OriginalDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            SistEndret = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            ToDate = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Version = 1
                        });
                });

            modelBuilder.Entity("NetBackend.Models.ControlAreas.PdControlArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ForskLink")
                        .HasColumnType("text");

                    b.Property<string>("ForskNavn")
                        .HasColumnType("text");

                    b.Property<string>("ForskNr")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OriginalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SistEndret")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PdControlAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ForskLink = "http://example.com/area1",
                            ForskNavn = "Area 1",
                            ForskNr = "001",
                            FromDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OriginalDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            SistEndret = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            ToDate = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Version = 1
                        },
                        new
                        {
                            Id = 2,
                            ForskLink = "http://example.com/area2",
                            ForskNavn = "Area 2",
                            ForskNr = "002",
                            FromDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OriginalDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            SistEndret = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            ToDate = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Version = 1
                        });
                });

            modelBuilder.Entity("NetBackend.Models.DiseaseZoneHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("DiseaseZoneHistories");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        });
                });

            modelBuilder.Entity("NetBackend.Models.History.ExportRestrictionAreaLink", b =>
                {
                    b.Property<int>("ExportRestrictionAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("DiseaseZoneHistoryId")
                        .HasColumnType("integer");

                    b.HasKey("ExportRestrictionAreaId", "DiseaseZoneHistoryId");

                    b.HasIndex("DiseaseZoneHistoryId");

                    b.ToTable("ExportRestrictionAreaLinks");

                    b.HasData(
                        new
                        {
                            ExportRestrictionAreaId = 1,
                            DiseaseZoneHistoryId = 1
                        },
                        new
                        {
                            ExportRestrictionAreaId = 2,
                            DiseaseZoneHistoryId = 2
                        });
                });

            modelBuilder.Entity("NetBackend.Models.History.IlaProtectionAreaLink", b =>
                {
                    b.Property<int>("IlaControlAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("DiseaseZoneHistoryId")
                        .HasColumnType("integer");

                    b.HasKey("IlaControlAreaId", "DiseaseZoneHistoryId");

                    b.HasIndex("DiseaseZoneHistoryId");

                    b.ToTable("IlaProtectionAreaLinks");

                    b.HasData(
                        new
                        {
                            IlaControlAreaId = 1,
                            DiseaseZoneHistoryId = 2
                        },
                        new
                        {
                            IlaControlAreaId = 2,
                            DiseaseZoneHistoryId = 3
                        });
                });

            modelBuilder.Entity("NetBackend.Models.History.IlaSurveillanceAreaLink", b =>
                {
                    b.Property<int>("IlaControlAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("DiseaseZoneHistoryId")
                        .HasColumnType("integer");

                    b.HasKey("IlaControlAreaId", "DiseaseZoneHistoryId");

                    b.HasIndex("DiseaseZoneHistoryId");

                    b.ToTable("IlaSurveillanceAreaLinks");

                    b.HasData(
                        new
                        {
                            IlaControlAreaId = 1,
                            DiseaseZoneHistoryId = 1
                        },
                        new
                        {
                            IlaControlAreaId = 2,
                            DiseaseZoneHistoryId = 2
                        });
                });

            modelBuilder.Entity("NetBackend.Models.History.PdProtectionAreaLink", b =>
                {
                    b.Property<int>("PdControlAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("DiseaseZoneHistoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("IlaControlAreaId")
                        .HasColumnType("integer");

                    b.HasKey("PdControlAreaId", "DiseaseZoneHistoryId");

                    b.HasIndex("DiseaseZoneHistoryId");

                    b.HasIndex("IlaControlAreaId");

                    b.ToTable("PdProtectionAreaLinks");

                    b.HasData(
                        new
                        {
                            PdControlAreaId = 1,
                            DiseaseZoneHistoryId = 2
                        },
                        new
                        {
                            PdControlAreaId = 2,
                            DiseaseZoneHistoryId = 3
                        });
                });

            modelBuilder.Entity("NetBackend.Models.History.PdSurveillanceAreaLink", b =>
                {
                    b.Property<int>("PdControlAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("DiseaseZoneHistoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("IlaControlAreaId")
                        .HasColumnType("integer");

                    b.HasKey("PdControlAreaId", "DiseaseZoneHistoryId");

                    b.HasIndex("DiseaseZoneHistoryId");

                    b.HasIndex("IlaControlAreaId");

                    b.ToTable("PdSurveillanceAreaLinks");

                    b.HasData(
                        new
                        {
                            PdControlAreaId = 1,
                            DiseaseZoneHistoryId = 1
                        },
                        new
                        {
                            PdControlAreaId = 2,
                            DiseaseZoneHistoryId = 2
                        });
                });

            modelBuilder.Entity("NetBackend.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Liten kantnål"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Torsk"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sei"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Laks"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ørret"
                        });
                });

            modelBuilder.Entity("NetBackend.Models.User.AccessKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EncryptedKey")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AccessKeys");
                });

            modelBuilder.Entity("NetBackend.Models.User.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("AccessibleEndpoints")
                        .HasColumnType("text[]");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApiKey");
                });

            modelBuilder.Entity("NetBackend.Models.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DatabaseName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NetBackend.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NetBackend.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetBackend.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NetBackend.Models.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetBackend.Models.History.ExportRestrictionAreaLink", b =>
                {
                    b.HasOne("NetBackend.Models.DiseaseZoneHistory", "DiseaseZoneHistory")
                        .WithMany("ExportRestrictionLink")
                        .HasForeignKey("DiseaseZoneHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetBackend.Models.ControlAreas.ExportRestrictionArea", "ExportRestrictionArea")
                        .WithMany("ExportRestrictionAreaLinks")
                        .HasForeignKey("ExportRestrictionAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseZoneHistory");

                    b.Navigation("ExportRestrictionArea");
                });

            modelBuilder.Entity("NetBackend.Models.History.IlaProtectionAreaLink", b =>
                {
                    b.HasOne("NetBackend.Models.DiseaseZoneHistory", "DiseaseZoneHistory")
                        .WithMany("IlaProtectionZoneLinks")
                        .HasForeignKey("DiseaseZoneHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetBackend.Models.ControlAreas.IlaControlArea", "IlaControlArea")
                        .WithMany("IlaProtectionAreaLinks")
                        .HasForeignKey("IlaControlAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseZoneHistory");

                    b.Navigation("IlaControlArea");
                });

            modelBuilder.Entity("NetBackend.Models.History.IlaSurveillanceAreaLink", b =>
                {
                    b.HasOne("NetBackend.Models.DiseaseZoneHistory", "DiseaseZoneHistory")
                        .WithMany("IlaSurveilanzeZoneLinks")
                        .HasForeignKey("DiseaseZoneHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetBackend.Models.ControlAreas.IlaControlArea", "IlaControlArea")
                        .WithMany("IlaSurveillanceAreaLinks")
                        .HasForeignKey("IlaControlAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseZoneHistory");

                    b.Navigation("IlaControlArea");
                });

            modelBuilder.Entity("NetBackend.Models.History.PdProtectionAreaLink", b =>
                {
                    b.HasOne("NetBackend.Models.DiseaseZoneHistory", "DiseaseZoneHistory")
                        .WithMany("PdProtectionZoneLinks")
                        .HasForeignKey("DiseaseZoneHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetBackend.Models.ControlAreas.IlaControlArea", null)
                        .WithMany("PdProtectionAreaLinks")
                        .HasForeignKey("IlaControlAreaId");

                    b.HasOne("NetBackend.Models.ControlAreas.PdControlArea", "PdControlArea")
                        .WithMany("PdProtectionAreaLinks")
                        .HasForeignKey("PdControlAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseZoneHistory");

                    b.Navigation("PdControlArea");
                });

            modelBuilder.Entity("NetBackend.Models.History.PdSurveillanceAreaLink", b =>
                {
                    b.HasOne("NetBackend.Models.DiseaseZoneHistory", "DiseaseZoneHistory")
                        .WithMany("PdSurveilanzeZoneLinks")
                        .HasForeignKey("DiseaseZoneHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetBackend.Models.ControlAreas.IlaControlArea", null)
                        .WithMany("PdSurveillanceAreaLinks")
                        .HasForeignKey("IlaControlAreaId");

                    b.HasOne("NetBackend.Models.ControlAreas.PdControlArea", "PdControlArea")
                        .WithMany("PdSurveillanceAreaLinks")
                        .HasForeignKey("PdControlAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseZoneHistory");

                    b.Navigation("PdControlArea");
                });

            modelBuilder.Entity("NetBackend.Models.User.ApiKey", b =>
                {
                    b.HasOne("NetBackend.Models.User.User", "User")
                        .WithMany("ApiKey")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetBackend.Models.ControlAreas.ExportRestrictionArea", b =>
                {
                    b.Navigation("ExportRestrictionAreaLinks");
                });

            modelBuilder.Entity("NetBackend.Models.ControlAreas.IlaControlArea", b =>
                {
                    b.Navigation("IlaProtectionAreaLinks");

                    b.Navigation("IlaSurveillanceAreaLinks");

                    b.Navigation("PdProtectionAreaLinks");

                    b.Navigation("PdSurveillanceAreaLinks");
                });

            modelBuilder.Entity("NetBackend.Models.ControlAreas.PdControlArea", b =>
                {
                    b.Navigation("PdProtectionAreaLinks");

                    b.Navigation("PdSurveillanceAreaLinks");
                });

            modelBuilder.Entity("NetBackend.Models.DiseaseZoneHistory", b =>
                {
                    b.Navigation("ExportRestrictionLink");

                    b.Navigation("IlaProtectionZoneLinks");

                    b.Navigation("IlaSurveilanzeZoneLinks");

                    b.Navigation("PdProtectionZoneLinks");

                    b.Navigation("PdSurveilanzeZoneLinks");
                });

            modelBuilder.Entity("NetBackend.Models.User.User", b =>
                {
                    b.Navigation("ApiKey");
                });
#pragma warning restore 612, 618
        }
    }
}
