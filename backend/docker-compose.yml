version: "3.4"

networks:
  dev:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - "29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_MIN_INSYNC_REPLICAS: "1"

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    container_name: init-kafka
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic species-updates --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic org-updates --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  netbackend:
    image: docker.io/library/netbackend
    depends_on:
      - postgresTest
      - postgresCustomerOne
      - postgresCustomerTwo
    container_name: netbackend
    ports:
      - "8088:80"
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=password;Server=postgresTest;Database=postgresTestDB;Pooling=true;Port=5432;
      - ConnectionStrings__CustomerOneConnection=User ID=postgres;Password=password;Server=postgresCustomerOne;Database=postgresCustomerOneDB;Pooling=true;Port=5432;
      - ConnectionStrings__CustomerTwoConnection=User ID=postgres;Password=password;Server=postgresCustomerTwo;Database=postgresCustomerTwoDB;Pooling=true;Port=5432;
      - ASPNETCORE_URLS=http://+:80
    networks:
      - dev

  postgresTest:
    image: postgres:latest
    container_name: postgresTest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgresTestDB
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - ./.containers/postgresTestDb:/var/lib/postgresql/data
    networks:
      - dev

  postgresCustomerOne:
    image: postgres:latest
    container_name: postgresCustomerOne
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgresCustomerOneDB
    ports:
      - "5434:5432"
    restart: always
    volumes:
      - ./.containers/postgresCustomerOneDb:/var/lib/postgresql/data
    networks:
      - dev

  postgresCustomerTwo:
    image: postgres:latest
    container_name: postgresCustomerTwo
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgresCustomerTwoDB
    ports:
      - "5435:5432"
    restart: always
    volumes:
      - ./.containers/postgresCustomerTwoDb:/var/lib/postgresql/data
    networks:
      - dev

  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: kafka
  #   networks:
  #     - dev
  #   ports:
  #     - "9092:9092"
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_CREATE_TOPICS: "species-updates:1:1"
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

volumes:
  app_data:
