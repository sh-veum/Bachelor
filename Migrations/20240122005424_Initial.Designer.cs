// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetBackend.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NetBackend.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20240122005424_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NetBackend.Models.Dto.CodSpawningGroundDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaDescription")
                        .HasColumnType("text");

                    b.Property<string>("Bmvalue")
                        .HasColumnType("text");

                    b.Property<int?>("GeometryId")
                        .HasColumnType("integer");

                    b.Property<string>("Information")
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .HasColumnType("text");

                    b.Property<string>("PlaceName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegisteredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GeometryId");

                    b.ToTable("CodSpawningGroundDtos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaDescription = "Description of Area One",
                            Bmvalue = "BMValue1",
                            Information = "Info about Spawning Ground One",
                            Origin = "Origin One",
                            PlaceName = "Spawning Ground One",
                            RegisteredDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = 100
                        },
                        new
                        {
                            Id = 2,
                            AreaDescription = "Description of Area Two",
                            Bmvalue = "BMValue2",
                            Information = "Info about Spawning Ground Two",
                            Origin = "Origin Two",
                            PlaceName = "Spawning Ground Two",
                            RegisteredDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = 200
                        });
                });

            modelBuilder.Entity("NetBackend.Models.Dto.LocalityDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AvgAdultFemaleLice")
                        .HasColumnType("double precision");

                    b.Property<bool?>("HasCleanerfishDeployed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasIla")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasMechanicalRemoval")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasPd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasReportedLice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasSalmonoids")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasSubstanceTreatments")
                        .HasColumnType("boolean");

                    b.Property<bool?>("InFilteredSelection")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFallow")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsOnLand")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSlaughterHoldingCage")
                        .HasColumnType("boolean");

                    b.Property<double?>("Lat")
                        .HasColumnType("double precision");

                    b.Property<long?>("LocalityNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("LocalityWeekId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Lon")
                        .HasColumnType("double precision");

                    b.Property<string>("Municipality")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityNo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LocalityDtos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvgAdultFemaleLice = 0.29999999999999999,
                            HasCleanerfishDeployed = true,
                            HasIla = true,
                            HasMechanicalRemoval = false,
                            HasPd = false,
                            HasReportedLice = true,
                            HasSalmonoids = true,
                            HasSubstanceTreatments = true,
                            InFilteredSelection = false,
                            IsFallow = false,
                            IsOnLand = true,
                            IsSlaughterHoldingCage = false,
                            Lat = 59.914000000000001,
                            LocalityNo = 101L,
                            LocalityWeekId = 202301L,
                            Lon = 10.752000000000001,
                            Municipality = "Municipality One",
                            MunicipalityNo = "M001",
                            Name = "Locality A"
                        },
                        new
                        {
                            Id = 2,
                            AvgAdultFemaleLice = 0.69999999999999996,
                            HasCleanerfishDeployed = false,
                            HasIla = false,
                            HasMechanicalRemoval = true,
                            HasPd = true,
                            HasReportedLice = false,
                            HasSalmonoids = false,
                            HasSubstanceTreatments = false,
                            InFilteredSelection = true,
                            IsFallow = true,
                            IsOnLand = false,
                            IsSlaughterHoldingCage = true,
                            Lat = 60.390999999999998,
                            LocalityNo = 102L,
                            LocalityWeekId = 202302L,
                            Lon = 5.3220000000000001,
                            Municipality = "Municipality Two",
                            MunicipalityNo = "M002",
                            Name = "Locality B"
                        });
                });

            modelBuilder.Entity("NetBackend.Models.Dto.LocalityIlaLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExportRestrictionAreaId")
                        .HasColumnType("integer");

                    b.Property<bool>("IlaConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IlaSuspected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReportingLocality")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocalityNo")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExportRestrictionAreaId");

                    b.HasIndex("PositionId");

                    b.ToTable("LocalityIlaLinks");
                });

            modelBuilder.Entity("NetBackend.Models.Dto.OrganizationNameIdDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OrgNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OrganizationNameIdDtos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Organization One",
                            OrgNo = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Organization Two",
                            OrgNo = 2
                        });
                });

            modelBuilder.Entity("NetBackend.Models.ExportRestrictionArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("LocalityNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Week")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ExportRestrictionAreas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocalityNo = 1L,
                            Week = 1,
                            Year = 2022
                        },
                        new
                        {
                            Id = 2,
                            LocalityNo = 2L,
                            Week = 2,
                            Year = 2022
                        });
                });

            modelBuilder.Entity("NetBackend.Models.Geometry.GeoJsonGeometry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeoJsonGeometry");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GeoJsonGeometry");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NetBackend.Models.History.ExportRestrictionAreaLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("LocalityNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Week")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ExportRestrictionAreaLink");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocalityNo = 1L,
                            Week = 1,
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            LocalityNo = 2L,
                            Week = 2,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("NetBackend.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Liten kantnål"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Torsk"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sei"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Laks"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ørret"
                        });
                });

            modelBuilder.Entity("GeoJsonLineString", b =>
                {
                    b.HasBaseType("NetBackend.Models.Geometry.GeoJsonGeometry");

                    b.HasDiscriminator().HasValue("GeoJsonLineString");
                });

            modelBuilder.Entity("GeoJsonPoint", b =>
                {
                    b.HasBaseType("NetBackend.Models.Geometry.GeoJsonGeometry");

                    b.HasDiscriminator().HasValue("GeoJsonPoint");
                });

            modelBuilder.Entity("GeoJsonPolygon", b =>
                {
                    b.HasBaseType("NetBackend.Models.Geometry.GeoJsonGeometry");

                    b.HasDiscriminator().HasValue("GeoJsonPolygon");
                });

            modelBuilder.Entity("NetBackend.Models.Dto.CodSpawningGroundDto", b =>
                {
                    b.HasOne("NetBackend.Models.Geometry.GeoJsonGeometry", "Geometry")
                        .WithMany()
                        .HasForeignKey("GeometryId");

                    b.Navigation("Geometry");
                });

            modelBuilder.Entity("NetBackend.Models.Dto.LocalityIlaLink", b =>
                {
                    b.HasOne("NetBackend.Models.ExportRestrictionArea", null)
                        .WithMany("Localities")
                        .HasForeignKey("ExportRestrictionAreaId");

                    b.HasOne("NetBackend.Models.Geometry.GeoJsonGeometry", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("NetBackend.Models.ExportRestrictionArea", b =>
                {
                    b.Navigation("Localities");
                });
#pragma warning restore 612, 618
        }
    }
}
